

Microchip Technology PIC LITE Macro Assembler V1.40 build -251452761 
                                                                                               Tue Feb 14 18:28:50 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	16F684
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	text7,local,class=CODE,merge=1,delta=2
    17                           	psect	intentry,global,class=CODE,delta=2
    18                           	dabs	1,0x7E,2
    19  0000                     
    20                           ; Version 1.40
    21                           ; Generated 01/12/2016 GMT
    22                           ; 
    23                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC16F684 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     	;# 
    55  0001                     	;# 
    56  0002                     	;# 
    57  0003                     	;# 
    58  0004                     	;# 
    59  0005                     	;# 
    60  0007                     	;# 
    61  000A                     	;# 
    62  000B                     	;# 
    63  000C                     	;# 
    64  000E                     	;# 
    65  000E                     	;# 
    66  000F                     	;# 
    67  0010                     	;# 
    68  0011                     	;# 
    69  0012                     	;# 
    70  0013                     	;# 
    71  0013                     	;# 
    72  0014                     	;# 
    73  0015                     	;# 
    74  0016                     	;# 
    75  0017                     	;# 
    76  0018                     	;# 
    77  0019                     	;# 
    78  001A                     	;# 
    79  001E                     	;# 
    80  001F                     	;# 
    81  0081                     	;# 
    82  0085                     	;# 
    83  0087                     	;# 
    84  008C                     	;# 
    85  008E                     	;# 
    86  008F                     	;# 
    87  0090                     	;# 
    88  0091                     	;# 
    89  0092                     	;# 
    90  0095                     	;# 
    91  0095                     	;# 
    92  0096                     	;# 
    93  0096                     	;# 
    94  0099                     	;# 
    95  009A                     	;# 
    96  009A                     	;# 
    97  009B                     	;# 
    98  009C                     	;# 
    99  009D                     	;# 
   100  009E                     	;# 
   101  009F                     	;# 
   102                           
   103                           	psect	nvBANK0
   104  0026                     __pnvBANK0:	
   105  0026                     _pwm_val:	
   106  0026                     	ds	2
   107  001F                     _ADCON0bits	set	31
   108  001E                     _ADRESH	set	30
   109  0015                     _CCP1CONbits	set	21
   110  0013                     _CCPR1L	set	19
   111  0017                     _ECCPASbits	set	23
   112  000B                     _INTCONbits	set	11
   113  000C                     _PIR1bits	set	12
   114  0005                     _PORTA	set	5
   115  0005                     _PORTAbits	set	5
   116  0007                     _PORTC	set	7
   117  0007                     _PORTCbits	set	7
   118  0016                     _PWM1CONbits	set	22
   119  0010                     _T1CONbits	set	16
   120  0012                     _T2CONbits	set	18
   121  009F                     _ADCON1bits	set	159
   122  009E                     _ADRESL	set	158
   123  0091                     _ANSEL	set	145
   124  0091                     _ANSELbits	set	145
   125  008C                     _PIE1bits	set	140
   126  0092                     _PR2	set	146
   127  0085                     _TRISA	set	133
   128  0085                     _TRISAbits	set	133
   129  0087                     _TRISC	set	135
   130  0087                     _TRISCbits	set	135
   131                           
   132                           ; #config settings
   133  0000                     
   134                           	psect	cinit
   135  0010                     start_initialization:	
   136  0010                     __initialization:	
   137                           
   138                           ; Clear objects allocated to BANK0
   139  0010  01A8               	clrf	__pbssBANK0& (0+127)
   140  0011                     end_of_initialization:	
   141                           ;End of C runtime variable initialization code
   142                           
   143  0011                     __end_of__initialization:	
   144  0011  0183               	clrf	3
   145  0012  2813               	ljmp	_main	;jump to C main() function
   146                           
   147                           	psect	bssBANK0
   148  0028                     __pbssBANK0:	
   149  0028                     _do_stuff:	
   150  0028                     	ds	1
   151                           
   152                           	psect	cstackCOMMON
   153  0071                     __pcstackCOMMON:	
   154  0071                     ?_configure_ports:	
   155  0071                     ?_configure_adc:	
   156                           ; 1 bytes @ 0x0
   157                           
   158  0071                     ?_configure_pwm:	
   159                           ; 1 bytes @ 0x0
   160                           
   161  0071                     ?_configure_tmr:	
   162                           ; 1 bytes @ 0x0
   163                           
   164  0071                     ?_main:	
   165                           ; 1 bytes @ 0x0
   166                           
   167  0071                     ?_inter:	
   168                           ; 1 bytes @ 0x0
   169                           
   170  0071                     ??_inter:	
   171                           ; 1 bytes @ 0x0
   172                           
   173                           
   174                           ; 1 bytes @ 0x0
   175  0071                     	ds	4
   176  0075                     ??_configure_ports:	
   177  0075                     ??_configure_adc:	
   178                           ; 1 bytes @ 0x4
   179                           
   180  0075                     ??_configure_pwm:	
   181                           ; 1 bytes @ 0x4
   182                           
   183  0075                     ??_configure_tmr:	
   184                           ; 1 bytes @ 0x4
   185                           
   186  0075                     ?_set_duty:	
   187                           ; 1 bytes @ 0x4
   188                           
   189  0075                     ?_do_adc:	
   190                           ; 1 bytes @ 0x4
   191                           
   192  0075                     set_duty@duty:	
   193                           ; 2 bytes @ 0x4
   194                           
   195                           
   196                           ; 2 bytes @ 0x4
   197  0075                     	ds	2
   198  0077                     ??_set_duty:	
   199  0077                     ??_do_adc:	
   200                           ; 1 bytes @ 0x6
   201                           
   202                           
   203                           ; 1 bytes @ 0x6
   204  0077                     	ds	2
   205                           
   206                           	psect	cstackBANK0
   207  0020                     __pcstackBANK0:	
   208  0020                     do_adc@tmp:	
   209                           
   210                           ; 2 bytes @ 0x0
   211  0020                     	ds	2
   212  0022                     ??_main:	
   213                           
   214                           ; 1 bytes @ 0x2
   215  0022                     	ds	2
   216  0024                     main@adc:	
   217                           
   218                           ; 2 bytes @ 0x4
   219  0024                     	ds	2
   220                           
   221                           	psect	maintext
   222  0013                     __pmaintext:	
   223 ;;
   224 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   225 ;;
   226 ;; *************** function _main *****************
   227 ;; Defined at:
   228 ;;		line 39 in file "main.c"
   229 ;; Parameters:    Size  Location     Type
   230 ;;		None
   231 ;; Auto vars:     Size  Location     Type
   232 ;;  adc             2    4[BANK0 ] unsigned int 
   233 ;; Return value:  Size  Location     Type
   234 ;;                  1    wreg      void 
   235 ;; Registers used:
   236 ;;		wreg, status,2, status,0, pclath, cstack
   237 ;; Tracked objects:
   238 ;;		On entry : B00/0
   239 ;;		On exit  : 0/0
   240 ;;		Unchanged: 0/0
   241 ;; Data sizes:     COMMON   BANK0   BANK1
   242 ;;      Params:         0       0       0
   243 ;;      Locals:         0       2       0
   244 ;;      Temps:          0       2       0
   245 ;;      Totals:         0       4       0
   246 ;;Total ram usage:        4 bytes
   247 ;; Hardware stack levels required when called:    2
   248 ;; This function calls:
   249 ;;		_configure_adc
   250 ;;		_configure_ports
   251 ;;		_configure_pwm
   252 ;;		_configure_tmr
   253 ;;		_do_adc
   254 ;;		_set_duty
   255 ;; This function is called by:
   256 ;;		Startup code after reset
   257 ;; This function uses a non-reentrant model
   258 ;;
   259                           
   260                           
   261                           ;psect for function _main
   262  0013                     _main:	
   263                           
   264                           ;main.c: 40: PORTCbits.RC2 = 0;
   265                           
   266                           ;incstack = 0
   267                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   268  0013  1283               	bcf	3,5	;RP0=0, select bank0
   269  0014  1107               	bcf	7,2	;volatile
   270                           
   271                           ;main.c: 42: configure_ports();
   272  0015  2101               	fcall	_configure_ports
   273                           
   274                           ;main.c: 43: configure_adc();
   275  0016  2122               	fcall	_configure_adc
   276                           
   277                           ;main.c: 44: configure_pwm();
   278  0017  20B1               	fcall	_configure_pwm
   279                           
   280                           ;main.c: 45: configure_tmr();
   281  0018  212F               	fcall	_configure_tmr
   282                           
   283                           ;main.c: 47: set_duty(0x00FF);
   284  0019  30FF               	movlw	255
   285  001A  00F5               	movwf	set_duty@duty
   286  001B  3000               	movlw	0
   287  001C  00F6               	movwf	set_duty@duty+1
   288  001D  20EA               	fcall	_set_duty
   289                           
   290                           ;main.c: 48: do_stuff = 0;
   291  001E  1283               	bcf	3,5	;RP0=0, select bank0
   292  001F  01A8               	clrf	_do_stuff
   293                           
   294                           ;main.c: 49: pwm_val = 0x01FF;
   295  0020  30FF               	movlw	255
   296  0021  00A6               	movwf	_pwm_val
   297  0022  3001               	movlw	1
   298  0023  00A7               	movwf	_pwm_val+1
   299                           
   300                           ;main.c: 51: PORTCbits.RC2 = 1;
   301  0024  1507               	bsf	7,2	;volatile
   302                           
   303                           ;main.c: 52: TRISAbits.TRISA0 = 1;
   304  0025  1683               	bsf	3,5	;RP0=1, select bank1
   305  0026  1405               	bsf	5,0	;volatile
   306  0027                     l768:	
   307                           ;main.c: 53: while(1) {
   308                           
   309                           
   310                           ;main.c: 55: if (do_stuff) {
   311  0027  1283               	bcf	3,5	;RP0=0, select bank0
   312  0028  0828               	movf	_do_stuff,w
   313  0029  1903               	btfsc	3,2
   314  002A  2827               	goto	l768
   315                           
   316                           ;main.c: 56: do_stuff = 0;
   317  002B  01A8               	clrf	_do_stuff
   318                           
   319                           ;main.c: 59: uint16_t adc = do_adc();
   320  002C  20D0               	fcall	_do_adc
   321  002D  0876               	movf	?_do_adc+1,w
   322  002E  1283               	bcf	3,5	;RP0=0, select bank0
   323  002F  00A5               	movwf	main@adc+1
   324  0030  0875               	movf	?_do_adc,w
   325  0031  00A4               	movwf	main@adc
   326                           
   327                           ;main.c: 60: adc = ((adc >> 1) & 0x01FF);
   328  0032  0825               	movf	main@adc+1,w
   329  0033  00A3               	movwf	??_main+1
   330  0034  0824               	movf	main@adc,w
   331  0035  00A2               	movwf	??_main
   332  0036  1003               	clrc
   333  0037  0CA3               	rrf	??_main+1,f
   334  0038  0CA2               	rrf	??_main,f
   335  0039  30FF               	movlw	255
   336  003A  0522               	andwf	??_main,w
   337  003B  00A4               	movwf	main@adc
   338  003C  3001               	movlw	1
   339  003D  0523               	andwf	??_main+1,w
   340  003E  00A5               	movwf	main@adc+1
   341                           
   342                           ;main.c: 63: if (PORTAbits.RA0) {
   343  003F  1C05               	btfss	5,0	;volatile
   344  0040  2846               	goto	l780
   345                           
   346                           ;main.c: 64: adc = (0x01FF + adc);
   347  0041  0824               	movf	main@adc,w
   348  0042  3EFF               	addlw	255
   349  0043  00A4               	movwf	main@adc
   350  0044  0825               	movf	main@adc+1,w
   351  0045  2851               	goto	L1
   352  0046                     l780:	
   353                           ;main.c: 65: } else {
   354                           
   355                           
   356                           ;main.c: 66: adc = (0x01FF - adc);
   357  0046  0924               	comf	main@adc,w
   358  0047  00A2               	movwf	??_main
   359  0048  0925               	comf	main@adc+1,w
   360  0049  00A3               	movwf	??_main+1
   361  004A  0AA2               	incf	??_main,f
   362  004B  1903               	skipnz
   363  004C  0AA3               	incf	??_main+1,f
   364  004D  0822               	movf	??_main,w
   365  004E  3EFF               	addlw	255
   366  004F  00A4               	movwf	main@adc
   367  0050  0823               	movf	??_main+1,w
   368  0051                     L1:	
   369  0051  1803               	skipnc
   370  0052  3E01               	addlw	1
   371  0053  3E01               	addlw	1
   372  0054  00A5               	movwf	main@adc+1
   373                           
   374                           ;main.c: 67: }
   375                           ;main.c: 70: if (adc > pwm_val) {
   376  0055  0825               	movf	main@adc+1,w
   377  0056  0227               	subwf	_pwm_val+1,w
   378  0057  1D03               	skipz
   379  0058  285B               	goto	u155
   380  0059  0824               	movf	main@adc,w
   381  005A  0226               	subwf	_pwm_val,w
   382  005B                     u155:	
   383  005B  1803               	skipnc
   384  005C  2880               	goto	l73
   385                           
   386                           ;main.c: 71: if (adc > (pwm_val+10)) {
   387  005D  0826               	movf	_pwm_val,w
   388  005E  3E0A               	addlw	10
   389  005F  00A2               	movwf	??_main
   390  0060  0827               	movf	_pwm_val+1,w
   391  0061  1803               	skipnc
   392  0062  3E01               	addlw	1
   393  0063  3E00               	addlw	0
   394  0064  00A3               	movwf	??_main+1
   395  0065  0825               	movf	main@adc+1,w
   396  0066  0223               	subwf	??_main+1,w
   397  0067  1D03               	skipz
   398  0068  286B               	goto	u165
   399  0069  0824               	movf	main@adc,w
   400  006A  0222               	subwf	??_main,w
   401  006B                     u165:	
   402  006B  1803               	skipnc
   403  006C  286F               	goto	l788
   404                           
   405                           ;main.c: 72: pwm_val += 8;
   406  006D  3008               	movlw	8
   407  006E  2870               	goto	L2
   408  006F                     l788:	
   409                           ;main.c: 73: } else {
   410                           
   411                           
   412                           ;main.c: 74: pwm_val += 1;
   413  006F  3001               	movlw	1
   414  0070                     L2:	
   415  0070  07A6               	addwf	_pwm_val,f
   416  0071  1803               	skipnc
   417  0072  0AA7               	incf	_pwm_val+1,f
   418  0073  3000               	movlw	0
   419  0074  07A7               	addwf	_pwm_val+1,f
   420                           
   421                           ;main.c: 75: }
   422                           ;main.c: 77: if (pwm_val > 0x03FF) {
   423  0075  3004               	movlw	4
   424  0076  0227               	subwf	_pwm_val+1,w
   425  0077  3000               	movlw	0
   426  0078  1903               	skipnz
   427  0079  0226               	subwf	_pwm_val,w
   428  007A  1C03               	skipc
   429  007B  2880               	goto	l73
   430                           
   431                           ;main.c: 78: pwm_val = 0x03FF;
   432  007C  30FF               	movlw	255
   433  007D  00A6               	movwf	_pwm_val
   434  007E  3003               	movlw	3
   435  007F  00A7               	movwf	_pwm_val+1
   436  0080                     l73:	
   437                           
   438                           ;main.c: 79: }
   439                           ;main.c: 80: }
   440                           ;main.c: 81: if (adc < pwm_val) {
   441  0080  0827               	movf	_pwm_val+1,w
   442  0081  0225               	subwf	main@adc+1,w
   443  0082  1D03               	skipz
   444  0083  2886               	goto	u185
   445  0084  0826               	movf	_pwm_val,w
   446  0085  0224               	subwf	main@adc,w
   447  0086                     u185:	
   448  0086  1803               	skipnc
   449  0087  28AB               	goto	l804
   450                           
   451                           ;main.c: 82: if (adc < (pwm_val-10)) {
   452  0088  0826               	movf	_pwm_val,w
   453  0089  3EF6               	addlw	246
   454  008A  00A2               	movwf	??_main
   455  008B  0827               	movf	_pwm_val+1,w
   456  008C  1803               	skipnc
   457  008D  3E01               	addlw	1
   458  008E  3EFF               	addlw	255
   459  008F  00A3               	movwf	??_main+1
   460  0090  0823               	movf	??_main+1,w
   461  0091  0225               	subwf	main@adc+1,w
   462  0092  1D03               	skipz
   463  0093  2896               	goto	u195
   464  0094  0822               	movf	??_main,w
   465  0095  0224               	subwf	main@adc,w
   466  0096                     u195:	
   467  0096  1803               	skipnc
   468  0097  28A1               	goto	l800
   469                           
   470                           ;main.c: 83: if (pwm_val >= 8) {
   471  0098  3000               	movlw	0
   472  0099  0227               	subwf	_pwm_val+1,w
   473  009A  3008               	movlw	8
   474  009B  1903               	skipnz
   475  009C  0226               	subwf	_pwm_val,w
   476  009D  1C03               	skipc
   477  009E  28A5               	goto	l802
   478                           
   479                           ;main.c: 84: pwm_val -= 8;
   480  009F  3008               	movlw	8
   481  00A0  28A6               	goto	L4
   482  00A1                     l800:	
   483                           ;main.c: 87: }
   484                           ;main.c: 88: } else {
   485                           
   486                           ;main.c: 86: pwm_val -= 1;
   487                           
   488                           ;main.c: 85: } else {
   489                           
   490                           
   491                           ;main.c: 89: if (pwm_val > 0) {
   492  00A1  0826               	movf	_pwm_val,w
   493  00A2  0427               	iorwf	_pwm_val+1,w
   494  00A3  1903               	btfsc	3,2
   495  00A4  28AB               	goto	l804
   496  00A5                     l802:	
   497                           
   498                           ;main.c: 90: pwm_val -= 1;
   499  00A5  3001               	movlw	1
   500  00A6                     L4:	
   501  00A6  02A6               	subwf	_pwm_val,f
   502  00A7  3000               	movlw	0
   503  00A8  1C03               	skipc
   504  00A9  03A7               	decf	_pwm_val+1,f
   505  00AA  02A7               	subwf	_pwm_val+1,f
   506  00AB                     l804:	
   507                           
   508                           ;main.c: 91: }
   509                           ;main.c: 92: }
   510                           ;main.c: 93: }
   511                           ;main.c: 95: set_duty(pwm_val);
   512  00AB  0827               	movf	_pwm_val+1,w
   513  00AC  00F6               	movwf	set_duty@duty+1
   514  00AD  0826               	movf	_pwm_val,w
   515  00AE  00F5               	movwf	set_duty@duty
   516  00AF  20EA               	fcall	_set_duty
   517  00B0  2827               	goto	l768
   518  00B1                     __end_of_main:	
   519                           ;main.c: 96: }
   520                           ;main.c: 97: }
   521                           ;main.c: 98: return;
   522                           
   523                           
   524                           	psect	text1
   525  00EA                     __ptext1:	
   526 ;; *************** function _set_duty *****************
   527 ;; Defined at:
   528 ;;		line 185 in file "main.c"
   529 ;; Parameters:    Size  Location     Type
   530 ;;  duty            2    4[COMMON] unsigned int 
   531 ;; Auto vars:     Size  Location     Type
   532 ;;		None
   533 ;; Return value:  Size  Location     Type
   534 ;;                  1    wreg      void 
   535 ;; Registers used:
   536 ;;		wreg, status,2, status,0
   537 ;; Tracked objects:
   538 ;;		On entry : 0/0
   539 ;;		On exit  : 0/0
   540 ;;		Unchanged: 0/0
   541 ;; Data sizes:     COMMON   BANK0   BANK1
   542 ;;      Params:         2       0       0
   543 ;;      Locals:         0       0       0
   544 ;;      Temps:          2       0       0
   545 ;;      Totals:         4       0       0
   546 ;;Total ram usage:        4 bytes
   547 ;; Hardware stack levels used:    1
   548 ;; Hardware stack levels required when called:    1
   549 ;; This function calls:
   550 ;;		Nothing
   551 ;; This function is called by:
   552 ;;		_main
   553 ;; This function uses a non-reentrant model
   554 ;;
   555                           
   556                           
   557                           ;psect for function _set_duty
   558  00EA                     _set_duty:	
   559                           
   560                           ;main.c: 187: CCP1CONbits.DCB = (duty & 0x0003);
   561                           
   562                           ;incstack = 0
   563                           ; Regs used in _set_duty: [wreg+status,2+status,0]
   564  00EA  0875               	movf	set_duty@duty,w
   565  00EB  3903               	andlw	3
   566  00EC  00F7               	movwf	??_set_duty
   567  00ED  0EF7               	swapf	??_set_duty,f
   568  00EE  1283               	bcf	3,5	;RP0=0, select bank0
   569  00EF  0815               	movf	21,w	;volatile
   570  00F0  0677               	xorwf	??_set_duty,w
   571  00F1  39CF               	andlw	-49
   572  00F2  0677               	xorwf	??_set_duty,w
   573  00F3  0095               	movwf	21	;volatile
   574                           
   575                           ;main.c: 189: CCPR1L = ((duty>>2) & 0x00FF);
   576  00F4  0876               	movf	set_duty@duty+1,w
   577  00F5  00F8               	movwf	??_set_duty+1
   578  00F6  0875               	movf	set_duty@duty,w
   579  00F7  00F7               	movwf	??_set_duty
   580  00F8  1003               	clrc
   581  00F9  0CF8               	rrf	??_set_duty+1,f
   582  00FA  0CF7               	rrf	??_set_duty,f
   583  00FB  1003               	clrc
   584  00FC  0CF8               	rrf	??_set_duty+1,f
   585  00FD  0CF7               	rrf	??_set_duty,f
   586  00FE  0877               	movf	??_set_duty,w
   587  00FF  0093               	movwf	19	;volatile
   588  0100  0008               	return
   589  0101                     __end_of_set_duty:	
   590                           
   591                           	psect	text2
   592  00D0                     __ptext2:	
   593 ;; *************** function _do_adc *****************
   594 ;; Defined at:
   595 ;;		line 173 in file "main.c"
   596 ;; Parameters:    Size  Location     Type
   597 ;;		None
   598 ;; Auto vars:     Size  Location     Type
   599 ;;  tmp             2    0[BANK0 ] unsigned int 
   600 ;; Return value:  Size  Location     Type
   601 ;;                  2    4[COMMON] unsigned int 
   602 ;; Registers used:
   603 ;;		wreg
   604 ;; Tracked objects:
   605 ;;		On entry : 0/0
   606 ;;		On exit  : 0/0
   607 ;;		Unchanged: 0/0
   608 ;; Data sizes:     COMMON   BANK0   BANK1
   609 ;;      Params:         2       0       0
   610 ;;      Locals:         0       2       0
   611 ;;      Temps:          2       0       0
   612 ;;      Totals:         4       2       0
   613 ;;Total ram usage:        6 bytes
   614 ;; Hardware stack levels used:    1
   615 ;; Hardware stack levels required when called:    1
   616 ;; This function calls:
   617 ;;		Nothing
   618 ;; This function is called by:
   619 ;;		_main
   620 ;; This function uses a non-reentrant model
   621 ;;
   622                           
   623                           
   624                           ;psect for function _do_adc
   625  00D0                     _do_adc:	
   626                           
   627                           ;main.c: 174: uint16_t tmp;
   628                           ;main.c: 176: ADCON0bits.GO_DONE = 1;
   629                           
   630                           ;incstack = 0
   631                           ; Regs used in _do_adc: [wreg]
   632  00D0  1283               	bcf	3,5	;RP0=0, select bank0
   633  00D1  149F               	bsf	31,1	;volatile
   634  00D2                     l100:	
   635                           ;main.c: 177: while(ADCON0bits.GO_DONE) {}
   636                           
   637  00D2  189F               	btfsc	31,1	;volatile
   638  00D3  28D2               	goto	l100
   639                           
   640                           ;main.c: 179: tmp = ((ADRESH << 8) + ADRESL) & 0x03FF;
   641  00D4  30FF               	movlw	255
   642  00D5  1683               	bsf	3,5	;RP0=1, select bank1
   643  00D6  051E               	andwf	30,w	;volatile
   644  00D7  00F7               	movwf	??_do_adc
   645  00D8  3003               	movlw	3
   646  00D9  1283               	bcf	3,5	;RP0=0, select bank0
   647  00DA  051E               	andwf	30,w	;volatile
   648  00DB  00F8               	movwf	??_do_adc+1
   649  00DC  0877               	movf	??_do_adc,w
   650  00DD  00A0               	movwf	do_adc@tmp
   651  00DE  0878               	movf	??_do_adc+1,w
   652  00DF  00A1               	movwf	do_adc@tmp+1
   653                           
   654                           ;main.c: 181: _delay((unsigned long)((10)*(4000000/4000000.0)));
   655  00E0  3003               	movlw	3
   656  00E1  00F7               	movwf	??_do_adc
   657  00E2                     u237:	
   658  00E2  0BF7               	decfsz	??_do_adc,f
   659  00E3  28E2               	goto	u237
   660                           
   661                           ;main.c: 182: return tmp;
   662  00E4  1283               	bcf	3,5	;RP0=0, select bank0
   663  00E5  0821               	movf	do_adc@tmp+1,w
   664  00E6  00F6               	movwf	?_do_adc+1
   665  00E7  0820               	movf	do_adc@tmp,w
   666  00E8  00F5               	movwf	?_do_adc
   667  00E9  0008               	return
   668  00EA                     __end_of_do_adc:	
   669                           
   670                           	psect	text3
   671  012F                     __ptext3:	
   672 ;; *************** function _configure_tmr *****************
   673 ;; Defined at:
   674 ;;		line 136 in file "main.c"
   675 ;; Parameters:    Size  Location     Type
   676 ;;		None
   677 ;; Auto vars:     Size  Location     Type
   678 ;;		None
   679 ;; Return value:  Size  Location     Type
   680 ;;                  1    wreg      void 
   681 ;; Registers used:
   682 ;;		wreg, status,2, status,0
   683 ;; Tracked objects:
   684 ;;		On entry : 0/0
   685 ;;		On exit  : 0/0
   686 ;;		Unchanged: 0/0
   687 ;; Data sizes:     COMMON   BANK0   BANK1
   688 ;;      Params:         0       0       0
   689 ;;      Locals:         0       0       0
   690 ;;      Temps:          0       0       0
   691 ;;      Totals:         0       0       0
   692 ;;Total ram usage:        0 bytes
   693 ;; Hardware stack levels used:    1
   694 ;; Hardware stack levels required when called:    1
   695 ;; This function calls:
   696 ;;		Nothing
   697 ;; This function is called by:
   698 ;;		_main
   699 ;; This function uses a non-reentrant model
   700 ;;
   701                           
   702                           
   703                           ;psect for function _configure_tmr
   704  012F                     _configure_tmr:	
   705                           
   706                           ;main.c: 138: PIR1bits.TMR1IF = 0;
   707                           
   708                           ;incstack = 0
   709                           ; Regs used in _configure_tmr: [wreg+status,2+status,0]
   710  012F  1283               	bcf	3,5	;RP0=0, select bank0
   711  0130  100C               	bcf	12,0	;volatile
   712                           
   713                           ;main.c: 139: PIE1bits.TMR1IE = 1;
   714  0131  1683               	bsf	3,5	;RP0=1, select bank1
   715  0132  140C               	bsf	12,0	;volatile
   716                           
   717                           ;main.c: 140: INTCONbits.PEIE = 1;
   718  0133  170B               	bsf	11,6	;volatile
   719                           
   720                           ;main.c: 141: INTCONbits.GIE = 1;
   721  0134  178B               	bsf	11,7	;volatile
   722                           
   723                           ;main.c: 144: T1CONbits.T1CKPS = 0b00;
   724  0135  30CF               	movlw	-49
   725  0136  1283               	bcf	3,5	;RP0=0, select bank0
   726  0137  0590               	andwf	16,f	;volatile
   727                           
   728                           ;main.c: 145: T1CONbits.TMR1CS = 0;
   729  0138  1090               	bcf	16,1	;volatile
   730                           
   731                           ;main.c: 146: T1CONbits.TMR1ON = 1;
   732  0139  1410               	bsf	16,0	;volatile
   733  013A  0008               	return
   734  013B                     __end_of_configure_tmr:	
   735                           
   736                           	psect	text4
   737  00B1                     __ptext4:	
   738 ;; *************** function _configure_pwm *****************
   739 ;; Defined at:
   740 ;;		line 149 in file "main.c"
   741 ;; Parameters:    Size  Location     Type
   742 ;;		None
   743 ;; Auto vars:     Size  Location     Type
   744 ;;		None
   745 ;; Return value:  Size  Location     Type
   746 ;;                  1    wreg      void 
   747 ;; Registers used:
   748 ;;		wreg, status,2, status,0
   749 ;; Tracked objects:
   750 ;;		On entry : 0/0
   751 ;;		On exit  : 0/0
   752 ;;		Unchanged: 0/0
   753 ;; Data sizes:     COMMON   BANK0   BANK1
   754 ;;      Params:         0       0       0
   755 ;;      Locals:         0       0       0
   756 ;;      Temps:          0       0       0
   757 ;;      Totals:         0       0       0
   758 ;;Total ram usage:        0 bytes
   759 ;; Hardware stack levels used:    1
   760 ;; Hardware stack levels required when called:    1
   761 ;; This function calls:
   762 ;;		Nothing
   763 ;; This function is called by:
   764 ;;		_main
   765 ;; This function uses a non-reentrant model
   766 ;;
   767                           
   768                           
   769                           ;psect for function _configure_pwm
   770  00B1                     _configure_pwm:	
   771                           
   772                           ;main.c: 151: CCP1CONbits.P1M0 = 0;
   773                           
   774                           ;incstack = 0
   775                           ; Regs used in _configure_pwm: [wreg+status,2+status,0]
   776  00B1  1283               	bcf	3,5	;RP0=0, select bank0
   777  00B2  1315               	bcf	21,6	;volatile
   778                           
   779                           ;main.c: 152: CCP1CONbits.P1M1 = 1;
   780  00B3  1795               	bsf	21,7	;volatile
   781                           
   782                           ;main.c: 153: CCP1CONbits.CCP1M = 0b1100;
   783  00B4  0815               	movf	21,w	;volatile
   784  00B5  39F0               	andlw	-16
   785  00B6  380C               	iorlw	12
   786  00B7  0095               	movwf	21	;volatile
   787                           
   788                           ;main.c: 156: T2CONbits.TMR2ON = 0;
   789  00B8  1112               	bcf	18,2	;volatile
   790                           
   791                           ;main.c: 157: T2CONbits.T2CKPS = 0b00;
   792  00B9  30FC               	movlw	-4
   793  00BA  0592               	andwf	18,f	;volatile
   794                           
   795                           ;main.c: 158: PR2 = 0xFF;
   796  00BB  30FF               	movlw	255
   797  00BC  1683               	bsf	3,5	;RP0=1, select bank1
   798  00BD  0092               	movwf	18	;volatile
   799                           
   800                           ;main.c: 161: PWM1CONbits.PRSEN = 1;
   801  00BE  1283               	bcf	3,5	;RP0=0, select bank0
   802  00BF  1796               	bsf	22,7	;volatile
   803                           
   804                           ;main.c: 162: PWM1CONbits.PDC = 1;
   805  00C0  0816               	movf	22,w	;volatile
   806  00C1  3980               	andlw	-128
   807  00C2  3801               	iorlw	1
   808  00C3  0096               	movwf	22	;volatile
   809                           
   810                           ;main.c: 165: ECCPASbits.ECCPAS = 0b100;
   811  00C4  0817               	movf	23,w	;volatile
   812  00C5  398F               	andlw	-113
   813  00C6  3840               	iorlw	64
   814  00C7  0097               	movwf	23	;volatile
   815                           
   816                           ;main.c: 166: ECCPASbits.PSSAC = 0b00;
   817  00C8  30F3               	movlw	-13
   818  00C9  0597               	andwf	23,f	;volatile
   819                           
   820                           ;main.c: 167: ECCPASbits.PSSBD = 0b01;
   821  00CA  0817               	movf	23,w	;volatile
   822  00CB  39FC               	andlw	-4
   823  00CC  3801               	iorlw	1
   824  00CD  0097               	movwf	23	;volatile
   825                           
   826                           ;main.c: 170: T2CONbits.TMR2ON = 1;
   827  00CE  1512               	bsf	18,2	;volatile
   828  00CF  0008               	return
   829  00D0                     __end_of_configure_pwm:	
   830                           
   831                           	psect	text5
   832  0101                     __ptext5:	
   833 ;; *************** function _configure_ports *****************
   834 ;; Defined at:
   835 ;;		line 104 in file "main.c"
   836 ;; Parameters:    Size  Location     Type
   837 ;;		None
   838 ;; Auto vars:     Size  Location     Type
   839 ;;		None
   840 ;; Return value:  Size  Location     Type
   841 ;;                  1    wreg      void 
   842 ;; Registers used:
   843 ;;		status,2
   844 ;; Tracked objects:
   845 ;;		On entry : 0/0
   846 ;;		On exit  : 0/0
   847 ;;		Unchanged: 0/0
   848 ;; Data sizes:     COMMON   BANK0   BANK1
   849 ;;      Params:         0       0       0
   850 ;;      Locals:         0       0       0
   851 ;;      Temps:          0       0       0
   852 ;;      Totals:         0       0       0
   853 ;;Total ram usage:        0 bytes
   854 ;; Hardware stack levels used:    1
   855 ;; Hardware stack levels required when called:    1
   856 ;; This function calls:
   857 ;;		Nothing
   858 ;; This function is called by:
   859 ;;		_main
   860 ;; This function uses a non-reentrant model
   861 ;;
   862                           
   863                           
   864                           ;psect for function _configure_ports
   865  0101                     _configure_ports:	
   866                           
   867                           ;main.c: 106: ANSEL = 0x00;
   868                           
   869                           ;incstack = 0
   870                           ; Regs used in _configure_ports: [status,2]
   871  0101  1683               	bsf	3,5	;RP0=1, select bank1
   872  0102  0191               	clrf	17	;volatile
   873                           
   874                           ;main.c: 108: TRISA = 0x00;
   875  0103  0185               	clrf	5	;volatile
   876                           
   877                           ;main.c: 109: PORTA = 0x00;
   878  0104  1283               	bcf	3,5	;RP0=0, select bank0
   879  0105  0185               	clrf	5	;volatile
   880                           
   881                           ;main.c: 111: TRISC = 0x00;
   882  0106  1683               	bsf	3,5	;RP0=1, select bank1
   883  0107  0187               	clrf	7	;volatile
   884                           
   885                           ;main.c: 112: PORTC = 0x00;
   886  0108  1283               	bcf	3,5	;RP0=0, select bank0
   887  0109  0187               	clrf	7	;volatile
   888                           
   889                           ;main.c: 115: ANSELbits.ANS4 = 1;
   890  010A  1683               	bsf	3,5	;RP0=1, select bank1
   891  010B  1611               	bsf	17,4	;volatile
   892                           
   893                           ;main.c: 116: TRISCbits.TRISC0 = 1;
   894  010C  1407               	bsf	7,0	;volatile
   895                           
   896                           ;main.c: 119: TRISCbits.TRISC5 = 0;
   897  010D  1287               	bcf	7,5	;volatile
   898                           
   899                           ;main.c: 120: TRISCbits.TRISC4 = 0;
   900  010E  1207               	bcf	7,4	;volatile
   901                           
   902                           ;main.c: 122: TRISAbits.TRISA0 = 1;
   903  010F  1405               	bsf	5,0	;volatile
   904                           
   905                           ;main.c: 123: TRISCbits.TRISC2 = 0;
   906  0110  1107               	bcf	7,2	;volatile
   907  0111  0008               	return
   908  0112                     __end_of_configure_ports:	
   909                           
   910                           	psect	text6
   911  0122                     __ptext6:	
   912 ;; *************** function _configure_adc *****************
   913 ;; Defined at:
   914 ;;		line 126 in file "main.c"
   915 ;; Parameters:    Size  Location     Type
   916 ;;		None
   917 ;; Auto vars:     Size  Location     Type
   918 ;;		None
   919 ;; Return value:  Size  Location     Type
   920 ;;                  1    wreg      void 
   921 ;; Registers used:
   922 ;;		wreg, status,2, status,0
   923 ;; Tracked objects:
   924 ;;		On entry : 0/0
   925 ;;		On exit  : 0/0
   926 ;;		Unchanged: 0/0
   927 ;; Data sizes:     COMMON   BANK0   BANK1
   928 ;;      Params:         0       0       0
   929 ;;      Locals:         0       0       0
   930 ;;      Temps:          0       0       0
   931 ;;      Totals:         0       0       0
   932 ;;Total ram usage:        0 bytes
   933 ;; Hardware stack levels used:    1
   934 ;; Hardware stack levels required when called:    1
   935 ;; This function calls:
   936 ;;		Nothing
   937 ;; This function is called by:
   938 ;;		_main
   939 ;; This function uses a non-reentrant model
   940 ;;
   941                           
   942                           
   943                           ;psect for function _configure_adc
   944  0122                     _configure_adc:	
   945                           
   946                           ;main.c: 128: ADCON1bits.ADCS = 0b101;
   947                           
   948                           ;incstack = 0
   949                           ; Regs used in _configure_adc: [wreg+status,2+status,0]
   950  0122  1683               	bsf	3,5	;RP0=1, select bank1
   951  0123  081F               	movf	31,w	;volatile
   952  0124  398F               	andlw	-113
   953  0125  3850               	iorlw	80
   954  0126  009F               	movwf	31	;volatile
   955                           
   956                           ;main.c: 131: ADCON0bits.CHS = 0b100;
   957  0127  1283               	bcf	3,5	;RP0=0, select bank0
   958  0128  081F               	movf	31,w	;volatile
   959  0129  39E3               	andlw	-29
   960  012A  3810               	iorlw	16
   961  012B  009F               	movwf	31	;volatile
   962                           
   963                           ;main.c: 132: ADCON0bits.ADFM = 1;
   964  012C  179F               	bsf	31,7	;volatile
   965                           
   966                           ;main.c: 133: ADCON0bits.ADON = 1;
   967  012D  141F               	bsf	31,0	;volatile
   968  012E  0008               	return
   969  012F                     __end_of_configure_adc:	
   970                           
   971                           	psect	text7
   972  0112                     __ptext7:	
   973 ;; *************** function _inter *****************
   974 ;; Defined at:
   975 ;;		line 192 in file "main.c"
   976 ;; Parameters:    Size  Location     Type
   977 ;;		None
   978 ;; Auto vars:     Size  Location     Type
   979 ;;		None
   980 ;; Return value:  Size  Location     Type
   981 ;;                  1    wreg      void 
   982 ;; Registers used:
   983 ;;		None
   984 ;; Tracked objects:
   985 ;;		On entry : 0/0
   986 ;;		On exit  : 0/0
   987 ;;		Unchanged: 0/0
   988 ;; Data sizes:     COMMON   BANK0   BANK1
   989 ;;      Params:         0       0       0
   990 ;;      Locals:         0       0       0
   991 ;;      Temps:          4       0       0
   992 ;;      Totals:         4       0       0
   993 ;;Total ram usage:        4 bytes
   994 ;; Hardware stack levels used:    1
   995 ;; This function calls:
   996 ;;		Nothing
   997 ;; This function is called by:
   998 ;;		Interrupt level 1
   999 ;; This function uses a non-reentrant model
  1000 ;;
  1001                           
  1002                           
  1003                           ;psect for function _inter
  1004  0112                     _inter:	
  1005                           
  1006                           ;main.c: 193: if (PIR1bits.TMR1IF) {
  1007  0112  1C0C               	btfss	12,0	;volatile
  1008  0113  2917               	goto	i1l110
  1009                           
  1010                           ;main.c: 194: do_stuff = 1;
  1011  0114  01A8               	clrf	_do_stuff
  1012  0115  0AA8               	incf	_do_stuff,f
  1013                           
  1014                           ;main.c: 195: PIR1bits.TMR1IF = 0;
  1015  0116  100C               	bcf	12,0	;volatile
  1016  0117                     i1l110:	
  1017  0117  0874               	movf	??_inter+3,w
  1018  0118  00FF               	movwf	127
  1019  0119  0873               	movf	??_inter+2,w
  1020  011A  008A               	movwf	10
  1021  011B  0872               	movf	??_inter+1,w
  1022  011C  0084               	movwf	4
  1023  011D  0E71               	swapf	??_inter^(0+-128),w
  1024  011E  0083               	movwf	3
  1025  011F  0EFE               	swapf	126,f
  1026  0120  0E7E               	swapf	126,w
  1027  0121  0009               	retfie
  1028  0122                     __end_of_inter:	
  1029  007E                     btemp	set	126	;btemp
  1030  007E                     wtemp0	set	126
  1031                           
  1032                           	psect	intentry
  1033  0004                     __pintentry:	
  1034                           ;incstack = 0
  1035                           ; Regs used in _inter: []
  1036                           
  1037  0004                     interrupt_function:	
  1038  007E                     saved_w	set	btemp
  1039  0004  00FE               	movwf	btemp
  1040  0005  0E03               	swapf	3,w
  1041  0006  00F1               	movwf	??_inter
  1042  0007  0804               	movf	4,w
  1043  0008  00F2               	movwf	??_inter+1
  1044  0009  080A               	movf	10,w
  1045  000A  00F3               	movwf	??_inter+2
  1046  000B  1283               	bcf	3,5	;RP0=0, select bank0
  1047  000C  087F               	movf	btemp+1,w
  1048  000D  00F4               	movwf	??_inter+3
  1049  000E  2912               	ljmp	_inter


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         1
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           13      8       8
    BANK0            69      6       9
    BANK1            32      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_do_adc
    _main->_set_duty

Critical Paths under _inter in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_do_adc

Critical Paths under _inter in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _inter in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0     353
                                              2 BANK0      4     4      0
                      _configure_adc
                    _configure_ports
                      _configure_pwm
                      _configure_tmr
                             _do_adc
                           _set_duty
 ---------------------------------------------------------------------------------
 (1) _set_duty                                             4     2      2     172
                                              4 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _do_adc                                               6     4      2      23
                                              4 COMMON     4     2      2
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _configure_tmr                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _configure_pwm                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _configure_ports                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _configure_adc                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _inter                                                4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _configure_adc
   _configure_ports
   _configure_pwm
   _configure_tmr
   _do_adc
   _set_duty

 _inter (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            D      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               D      8       8       1       61.5%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            45      0       0       3        0.0%
BANK0               45      6       9       4       13.0%
BANK1               20      0       0       5        0.0%
ABS                  0      0      11       6        0.0%
BITBANK1            20      0       0       7        0.0%
DATA                 0      0      11       8        0.0%


Microchip Technology PIC Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Tue Feb 14 18:28:50 2017

             __CFG_CP$OFF 0000                        l73 0080            ?_configure_adc 0071  
          ?_configure_pwm 0071            ?_configure_tmr 0071                       l100 00D2  
                     l800 00A1                       l802 00A5                       l804 00AB  
                     l780 0046                       l768 0027                       l788 006F  
                     u155 005B                       u237 00E2                       u165 006B  
                     _PR2 0092                       u185 0086              __CFG_CPD$OFF 0000  
                     u195 0096                       fsr0 0004              __CFG_FOSC$HS 0000  
                    _main 0013                      btemp 007E             __CFG_BOREN$ON 0000  
                    start 000F          ?_configure_ports 0071             __CFG_IESO$OFF 0000  
           __CFG_MCLRE$ON 0000                     ?_main 0071             __CFG_WDTE$OFF 0000  
                   _ANSEL 0091                     i1l110 0117                     _PORTA 0005  
                   _PORTC 0007                     _TRISA 0085                     _TRISC 0087  
          __CFG_FCMEN$OFF 0000                     _inter 0112                     pclath 000A  
                   status 0003                     wtemp0 007E           __initialization 0010  
            __end_of_main 00B1           ??_configure_adc 0075           ??_configure_pwm 0075  
         ??_configure_tmr 0075                    ??_main 0022                    ?_inter 0071  
                  _ADRESH 001E                    _ADRESL 009E                    _CCPR1L 0013  
          __CFG_PWRTE$OFF 0000                    _do_adc 00D0          __end_of_set_duty 0101  
                  saved_w 007E   __end_of__initialization 0011            __pcstackCOMMON 0071  
           __end_of_inter 0122                   ??_inter 0071                __pbssBANK0 0028  
              __pmaintext 0013                   ?_do_adc 0075                __pintentry 0004  
               ?_set_duty 0075           __size_of_do_adc 001A  __size_of_configure_ports 0011  
               _ANSELbits 0091                   __ptext1 00EA                   __ptext2 00D0  
                 __ptext3 012F                   __ptext4 00B1                   __ptext5 0101  
                 __ptext6 0122                   __ptext7 0112                 _T1CONbits 0010  
               _T2CONbits 0012                   _pwm_val 0026                   main@adc 0024  
    end_of_initialization 0011                ??_set_duty 0077     __end_of_configure_adc 012F  
   __end_of_configure_pwm 00D0     __end_of_configure_tmr 013B                 _PORTAbits 0005  
               _PORTCbits 0007                 _TRISAbits 0085                 _TRISCbits 0087  
             _CCP1CONbits 0015            __end_of_do_adc 00EA       start_initialization 0010  
       ??_configure_ports 0075                  ??_do_adc 0077                 ___latbits 0000  
           __pcstackBANK0 0020                 __pnvBANK0 0026         __size_of_set_duty 0017  
          __size_of_inter 0010         interrupt_function 0004                 do_adc@tmp 0020  
                _PIE1bits 008C                  _PIR1bits 000C                _ADCON0bits 001F  
              _ADCON1bits 009F                _ECCPASbits 0017           _configure_ports 0101  
                _do_stuff 0028    __size_of_configure_adc 000D    __size_of_configure_pwm 001F  
  __size_of_configure_tmr 000C             __size_of_main 009E                  _set_duty 00EA  
            set_duty@duty 0075                _INTCONbits 000B               _PWM1CONbits 0016  
                intlevel1 0000   __end_of_configure_ports 0112             _configure_adc 0122  
           _configure_pwm 00B1             _configure_tmr 012F  
